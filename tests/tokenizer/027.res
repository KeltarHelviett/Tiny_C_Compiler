Position		SymType			Value			Text

(1, 1)			KEYWORD			27				  void
(1, 6)			ID			lc				  lc
(1, 8)			LBRACKET			(				  (
(1, 9)			KEYWORD			2				  char
(1, 14)			ASTERIX			*				  *
(1, 15)			ID			str				  str
(1, 18)			RBRACKET			)				  )
(2, 1)			LCURLY_BRACKET			{				  {
(3, 5)			KEYWORD			12				  for
(3, 8)			LBRACKET			(				  (
(3, 9)			KEYWORD			15				  int
(3, 13)			ID			i				  i
(3, 15)			ASSIGNMENT			=				  =
(3, 17)			NUM_INT			0				  0
(3, 18)			SEMICOLON			;				  ;
(3, 20)			ID			str				  str
(3, 23)			LSQUARE_BRACKET			[				  [
(3, 24)			ID			i				  i
(3, 25)			RSQUARE_BRACKET			]				  ]
(3, 27)			RELOP_NE			!=				  !=
(3, 30)			CHARACTER			39				  '\0'
(3, 34)			SEMICOLON			;				  ;
(3, 36)			DOUBLE_PLUS			++				  ++
(3, 38)			ID			i				  i
(3, 39)			RBRACKET			)				  )
(4, 5)			LCURLY_BRACKET			{				  {
(5, 9)			KEYWORD			14				  if
(5, 12)			LBRACKET			(				  (
(5, 13)			ID			str				  str
(5, 16)			LSQUARE_BRACKET			[				  [
(5, 17)			ID			i				  i
(5, 18)			RSQUARE_BRACKET			]				  ]
(5, 20)			RELOP_LE			<=				  <=
(5, 23)			CHARACTER			90				  'Z'
(5, 27)			LOGIC_AND			&&				  &&
(5, 30)			ID			str				  str
(5, 33)			LSQUARE_BRACKET			[				  [
(5, 34)			ID			i				  i
(5, 35)			RSQUARE_BRACKET			]				  ]
(5, 37)			RELOP_GE			>=				  >=
(5, 40)			CHARACTER			65				  'A'
(5, 43)			RBRACKET			)				  )
(6, 13)			ID			str				  str
(6, 16)			LSQUARE_BRACKET			[				  [
(6, 17)			ID			i				  i
(6, 18)			RSQUARE_BRACKET			]				  ]
(6, 20)			ASSIGNMENT_BY_SUM			+=				  +=
(6, 23)			NUM_INT			32				  32
(6, 25)			SEMICOLON			;				  ;
(7, 5)			RCURLY_BRACKET			}				  }
(8, 1)			RCURLY_BRACKET			}				  }
