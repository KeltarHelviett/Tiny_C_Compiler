Position		Type			Value			Text

(1, 1)			RELOP_EQ		==		==
(1, 4)			RELOP_GE		>=		>=
(1, 7)			RELOP_LE		<=		<=
(1, 10)			RELOP_LT		<		<
(1, 12)			RELOP_GT		>		>
(1, 14)			RELOP_NE		!=		!=
(2, 1)			BITWISE_LSHIFT		<<		<<
(2, 4)			BITWISE_RSHIFT		>>		>>
(2, 7)			BITWISE_NOT		~		~
(2, 9)			BITWISE_XOR		^		^
(2, 11)			BITWISE_OR		|		|
(2, 13)			BITWISE_AND		&		&
(4, 1)			LOGIC_AND		&&		&&
(4, 4)			LOBIC_OR		||		||
(4, 7)			LOGIC_NO		!		!
(6, 1)			LSQUARE_BRACKET		[		[
(6, 2)			RSQUARE_BRACKER		]		]
(6, 4)			LCURLY_BRACKET		{		{
(6, 6)			RCURLY_BRACKET		}		}
(6, 8)			LBRACKET		(		(
(6, 13)			RBRACKET		)		)
(8, 1)			PLUS		+		+
(8, 3)			MINUS		-		-
(8, 5)			DOUBLE_PLUS		++		++
(8, 8)			DOUBLE_MINUS		--		--
(8, 11)			ASTERIX		*		*
(8, 13)			FORWARD_SLASH		/		/
(8, 15)			REMINDER		%		%
(10, 1)			ARROW		->		->
(10, 4)			DOT		.		.
(10, 6)			COMMA		,		,
(12, 1)			ASSIGNMENT_BY_SUM		+=		+=
(12, 4)			ASSIGNMENT_BY_DIFFERENCE		-=		-=
(12, 7)			ASSIGNMENT_BY_PRODUCT		*=		*=
(12, 10)			ASSIGNMENT_BY_QUOTIENT		/=		/=
(12, 13)			REMINDER		%		%
(12, 14)			ASSIGNMENT		=		=
(12, 16)			ASSIGNMENT_BY_BITWISE_LSHIFT		<<=		<<=
(12, 20)			ASSIGNMENT_BY_BITWISE_RSHIFT		>>=		>>=
(12, 24)			ASSIGNMENT_BY_BITWISE_XOR		^=		^=
(12, 27)			ASSIGNMENT_BY_BITWISE_OR		|=		|=
(12, 30)			ASSIGNMENT_BY_BITWISE_XOR		^=		^=
(14, 1)			QUESTION_MARK		?		?
(14, 3)			COLON		:		:
